# -------------------------------
# build-system
# -------------------------------
[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=61.0",
  "wheel",
]

# -------------------------------
# project (PEP 621 metadata)
# -------------------------------
[project]
name = "verl"
# We'll mark the version as "dynamic" because it's read from the file "verl/version/version" 
# (PEP 621 calls this "dynamic version"). 
# The actual version is specified in the [tool.setuptools.dynamic] section below.
dynamic = ["version", "authors", "urls"]

dependencies = [
  "accelerate>=1.7.0",
  "codetiming>=1.4.0",
  "datasets>=3.6.0",
  "dill>=0.3.8",
  "huggingface-hub>=0.33.0",
  "hydra-core>=1.3.2",
  "numpy>=1.26.4",
  "pandas>=2.3.0",
  "setuptools>=80.9.0",
  "peft>=0.15.2",
  "pyarrow>=19.0.0",
  "pybind11>=2.13.6",
  "pylatexenc>=2.10",
  "ray[default]>=2.10",
  "tensordict<=0.6.2",
  "torch-memory-saver>=0.0.5",
  "torchdata>=0.11.0",
  "torchvision>=0.21.0",
  "transformers>=4.51.1",
  "wandb>=0.20.1",
  "msgspec>=0.19.0",
  "megatron-core[megatron]",
  "pip>=25.1.1",
]
description = "verl: Volcano Engine Reinforcement Learning for LLM"
license = {file = "LICENSE"}# or "Apache-2.0", if you prefer an SPDX identifier
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.10"

[[tool.uv.dependency-metadata]]
name = "flash-attn"
requires-dist = ["torch", "einops"]
version = "2.7.4.post1"

[tool.uv.sources]
apex = {git = "https://github.com/NVIDIA/apex.git"}
megatron-core = {git = "https://github.com/NVIDIA/Megatron-LM.git", rev = "core_v0.12.0"}
transformer-engine = {git = "https://github.com/NVIDIA/TransformerEngine.git", rev = "v2.3"}

[project.optional-dependencies]
compile = ["flash-attn>=2.7.4.post1", "apex", "transformer-engine"]
sglang = ["sglang[all]==0.4.6.post5"]
vllm = ["vllm==0.8.2"]

# -------------------------------
# tool.ruff - Linting configuration
# -------------------------------
[tool.ruff]
# Note: While the formatter will attempt to format lines such that they remain within the line-length,
# it isn't a hard upper bound, and formatted lines may exceed the line-length.
line-length = 300 # TODO: Reduce this to a more reasonable value

[tool.ruff.lint]
isort = {known-first-party = ["verl"]}
# c.f. https://github.com/vllm-project/vllm/blob/ce8d6b75fc0586045df75ee1568a5b5f9957251b/pyproject.toml
ignore = [
  # star imports
  "F405",
  "F403", # lambda expression assignment
  "E731", # Loop control variable not used within loop body
  "B007", # f-string format
  "UP032", # Can remove once 3.10+ is the minimum Python version
  "UP007", # `.log()` statement uses f-string
  "G004",
]
select = [
  # pycodestyle
  "E", # Pyflakes
  "F", # pyupgrade
  "UP", # flake8-bugbear
  "B", # isort
  "I",
  "G",
]

# -------------------------------
# tool.setuptools - Additional config
# -------------------------------
[tool.setuptools]
# True means `setuptools` will attempt to include all relevant files in package_data automatically.
# This corresponds to `include_package_data=True` in setup.py.
include-package-data = true

# We read the version from a file in 'verl/version/version'
[tool.setuptools.dynamic]
version = {file = "verl/version/version"}

# If you need to mimic `package_dir={'': '.'}`:
[tool.setuptools.package-dir]
"" = "."

# If you need to include specific non-Python data (like YAML files or version file):
# This is the rough equivalent of package_data={'': ['version/*'], 'verl': ['trainer/config/*.yaml']}
[tool.setuptools.package-data]
verl = [
  "version/*",
  "trainer/config/*.yaml",
]

[tool.uv]
conflicts = [
  [
    {extra = "sglang"},
    {extra = "vllm"},
  ],
]
no-build-isolation-package = ["flash-attn", "apex", "transformer-engine"]
